// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "mad", "symbols": ["elem"]},
    {"name": "mad", "symbols": ["elem", "nl", "mad"], "postprocess": ([e,,m]) => [e, ...m]},
    {"name": "elem", "symbols": ["h1"], "postprocess": id},
    {"name": "elem", "symbols": ["h2"], "postprocess": id},
    {"name": "elem", "symbols": ["h3"], "postprocess": id},
    {"name": "elem", "symbols": ["h4"], "postprocess": id},
    {"name": "elem", "symbols": ["h5"], "postprocess": id},
    {"name": "elem", "symbols": ["h6"], "postprocess": id},
    {"name": "elem", "symbols": ["p"], "postprocess": id},
    {"name": "elem", "symbols": ["quote"], "postprocess": id},
    {"name": "elem", "symbols": ["code"], "postprocess": id},
    {"name": "elem", "symbols": ["comp"], "postprocess": id},
    {"name": "elem", "symbols": ["attr"], "postprocess": id},
    {"name": "elem", "symbols": ["e"], "postprocess": id},
    {"name": "h1", "symbols": ["e", {"literal":"#"}, /[^#\n\r]/, "line"], "postprocess": ([,,c,l])    => ({t:'h1',    v:[c, ...l]})},
    {"name": "h1", "symbols": ["e", {"literal":"#"}], "postprocess": ()           => ({t:'h1',    v:[]       })},
    {"name": "h2$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h2", "symbols": ["e", "h2$string$1", /[^#\n\r]/, "line"], "postprocess": ([,,c,l])    => ({t:'h2',    v:[c, ...l]})},
    {"name": "h2$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h2", "symbols": ["e", "h2$string$2"], "postprocess": ()           => ({t:'h2',    v:[]       })},
    {"name": "h3$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h3", "symbols": ["e", "h3$string$1", /[^#\n\r]/, "line"], "postprocess": ([,,c,l])    => ({t:'h3',    v:[c, ...l]})},
    {"name": "h3$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h3", "symbols": ["e", "h3$string$2"], "postprocess": ()           => ({t:'h3',    v:[]       })},
    {"name": "h4$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h4", "symbols": ["e", "h4$string$1", /[^#\n\r]/, "line"], "postprocess": ([,,c,l])    => ({t:'h4',    v:[c, ...l]})},
    {"name": "h4$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h4", "symbols": ["e", "h4$string$2"], "postprocess": ()           => ({t:'h4',    v:[]       })},
    {"name": "h5$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h5", "symbols": ["e", "h5$string$1", /[^#\n\r]/, "line"], "postprocess": ([,,c,l])    => ({t:'h5',    v:[c, ...l]})},
    {"name": "h5$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h5", "symbols": ["e", "h5$string$2"], "postprocess": ()           => ({t:'h5',    v:[]       })},
    {"name": "h6$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h6", "symbols": ["e", "h6$string$1", "line"], "postprocess": ([,,l])      => ({t:'h6',    v:l        })},
    {"name": "p", "symbols": ["e", /[^#>`\s:{]/, "line"], "postprocess": ([,c,l])     => ({t:'p',     v:[c, ...l]})},
    {"name": "quote", "symbols": ["e", {"literal":">"}, "line"], "postprocess": ([,,l])      => ({t:'quote', v:l        })},
    {"name": "code", "symbols": ["e", {"literal":"`"}, "line"], "postprocess": ([,,l])      => ({t:'code',  v:l        })},
    {"name": "comp", "symbols": ["e", "tag"], "postprocess": ([,t])       => ({t:"comp",  v:t, a:[]  })},
    {"name": "comp", "symbols": ["e", "tag", "_", {"literal":"{"}, "_", "args", "_", {"literal":"}"}], "postprocess": ([,t,,,,as]) => ({t:"comp",  v:t, a:as  })},
    {"name": "attr", "symbols": ["e", {"literal":"{"}, "_", "attrs", "_", {"literal":"}"}, "line"], "postprocess": ([,,,a])     => ({t:'attr',  v:a        })},
    {"name": "args$ebnf$1", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "args$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "args", "symbols": ["arg", "_", "args$ebnf$1"], "postprocess": ([arg])         => [arg]},
    {"name": "args", "symbols": ["arg", "_", {"literal":","}, "_", "args"], "postprocess": ([arg,,,,args]) => [arg, ...args]},
    {"name": "arg", "symbols": ["word", "_", {"literal":":"}, "_", "anum"], "postprocess": ([n,,,,v])      => ({t:"named-arg",   n, v})},
    {"name": "arg", "symbols": ["word", "_", {"literal":":"}, "_", {"literal":"{"}, "mad", {"literal":"}"}], "postprocess": ([n,,,,,c])     => ({t:"content-arg", n, c})},
    {"name": "attrs", "symbols": ["props"], "postprocess": id},
    {"name": "attrs", "symbols": ["id"], "postprocess": id},
    {"name": "attrs", "symbols": ["props", "__", "id"], "postprocess": ([as,,id])       => [...as, id]},
    {"name": "attrs", "symbols": ["id", "__", "props"], "postprocess": ([id,,as])       => [id, ...as]},
    {"name": "attrs", "symbols": ["props", "__", "id", "__", "props"], "postprocess": ([as1,,id,,as2]) => [...as1, id, ...as2]},
    {"name": "props", "symbols": ["prop"]},
    {"name": "props", "symbols": ["prop", "__", "props"], "postprocess": ([attr,,props])  => [attr, ...props]},
    {"name": "prop", "symbols": ["boolAtt"], "postprocess": id},
    {"name": "prop", "symbols": ["namedAttr"], "postprocess": id},
    {"name": "prop", "symbols": ["class"], "postprocess": id},
    {"name": "boolAtt", "symbols": ["word"], "postprocess": ([v])            => ({t:"bool-attr",  v   })},
    {"name": "namedAttr", "symbols": ["word", "_", {"literal":"="}, "_", "anum"], "postprocess": ([n,,,,v])       => ({t:"named-attr", n, v})},
    {"name": "class", "symbols": [{"literal":"."}, "word"], "postprocess": ([,v])           => ({t:"class-attr", v   })},
    {"name": "id", "symbols": [{"literal":"#"}, "word"], "postprocess": ([,v])           => ({t:"id-attr",    v   })},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": d => null},
    {"name": "__$ebnf$1", "symbols": [/[\s]/]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": d => null},
    {"name": "q", "symbols": [{"literal":"'"}]},
    {"name": "q", "symbols": [{"literal":"\""}], "postprocess": d => null},
    {"name": "word$ebnf$1", "symbols": [/[\w-]/]},
    {"name": "word$ebnf$1", "symbols": ["word$ebnf$1", /[\w-]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "word", "symbols": ["word$ebnf$1"], "postprocess": ([d]) => d.join('')},
    {"name": "anum", "symbols": ["string"], "postprocess": id},
    {"name": "anum", "symbols": ["number"], "postprocess": id},
    {"name": "string$ebnf$1", "symbols": []},
    {"name": "string$ebnf$1", "symbols": ["string$ebnf$1", /[\w\s.]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string", "symbols": ["q", "string$ebnf$1", "q"], "postprocess": ([,s]) => s.join('')},
    {"name": "number$ebnf$1", "symbols": [/[\d]/]},
    {"name": "number$ebnf$1", "symbols": ["number$ebnf$1", /[\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1"], "postprocess": ([d]) => d.join('')},
    {"name": "number$ebnf$2", "symbols": [/[\d]/]},
    {"name": "number$ebnf$2", "symbols": ["number$ebnf$2", /[\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$3", "symbols": [/[\d]/]},
    {"name": "number$ebnf$3", "symbols": ["number$ebnf$3", /[\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$2", {"literal":"."}, "number$ebnf$3"], "postprocess": ([d]) => d.join('')},
    {"name": "nl", "symbols": [/[\n\r]/], "postprocess": d => null},
    {"name": "line$ebnf$1", "symbols": []},
    {"name": "line$ebnf$1", "symbols": ["line$ebnf$1", /[^\n\r]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "line", "symbols": ["line$ebnf$1"], "postprocess": id},
    {"name": "e$ebnf$1", "symbols": []},
    {"name": "e$ebnf$1", "symbols": ["e$ebnf$1", /[^\S\r\n]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "e", "symbols": ["e$ebnf$1"], "postprocess": () => ({t:"empty"})},
    {"name": "tag", "symbols": [{"literal":":"}, "word", {"literal":"-"}, "word"], "postprocess": ([,w1,d,w2]) => w1 + d + w2}
]
  , ParserStart: "mad"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
