// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

const join = line => line.join('').trim()
const raw  = line => line.reduce((prev, curr) => curr == ' ' ? prev + ' ' : prev + curr ,'')
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "mad", "symbols": ["_"], "postprocess": d => []},
    {"name": "mad$ebnf$1", "symbols": []},
    {"name": "mad$ebnf$1$subexpression$1", "symbols": ["nl"]},
    {"name": "mad$ebnf$1", "symbols": ["mad$ebnf$1", "mad$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "mad", "symbols": ["blockStart", "mad$ebnf$1"], "postprocess": id},
    {"name": "mad", "symbols": ["_", "compStart", "_"], "postprocess": ([,d]) => d},
    {"name": "blockStart", "symbols": ["block", "nl", "blockStart"], "postprocess": ([b,,b1]) => [b, ...b1]},
    {"name": "blockStart$ebnf$1$subexpression$1", "symbols": ["nl", "empty"]},
    {"name": "blockStart$ebnf$1", "symbols": ["blockStart$ebnf$1$subexpression$1"]},
    {"name": "blockStart$ebnf$1$subexpression$2", "symbols": ["nl", "empty"]},
    {"name": "blockStart$ebnf$1", "symbols": ["blockStart$ebnf$1", "blockStart$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "blockStart", "symbols": ["block", "blockStart$ebnf$1", "compStart"], "postprocess": ([b,,b1]) => [b, ...b1]},
    {"name": "blockStart", "symbols": ["block"]},
    {"name": "compStart$ebnf$1", "symbols": []},
    {"name": "compStart$ebnf$1$subexpression$1", "symbols": ["nl", "empty"]},
    {"name": "compStart$ebnf$1", "symbols": ["compStart$ebnf$1", "compStart$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compStart", "symbols": ["comp", "compStart$ebnf$1", "compStart"], "postprocess": ([b,,b1]) => [b, ...b1]},
    {"name": "compStart", "symbols": ["comp", "nl", "blockStart"], "postprocess": ([b,,b1]) => [b, ...b1]},
    {"name": "compStart", "symbols": ["comp"]},
    {"name": "comp", "symbols": ["tag", "_", {"literal":";"}], "postprocess": ([tag])                => ({t:"comp",            tag})},
    {"name": "comp", "symbols": ["tag", "__", "attrsBlock", "_", {"literal":";"}], "postprocess": ([tag,,attrs])         => ({t:"comp-attrs",      tag, attrs})},
    {"name": "comp$ebnf$1$subexpression$1", "symbols": ["_", {"literal":";"}]},
    {"name": "comp$ebnf$1", "symbols": ["comp$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "comp$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "comp", "symbols": ["tag", "_", {"literal":"{"}, "_", "args", "_", {"literal":"}"}, "comp$ebnf$1"], "postprocess": ([tag,,,,args])        => ({t:"comp-args",       tag, args})},
    {"name": "comp$ebnf$2$subexpression$1", "symbols": ["_", {"literal":";"}]},
    {"name": "comp$ebnf$2", "symbols": ["comp$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "comp$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "comp", "symbols": ["tag", "__", "attrsBlock", "_", {"literal":"{"}, "_", "args", "_", {"literal":"}"}, "comp$ebnf$2"], "postprocess": ([tag,,attrs,,,,args]) => ({t:"comp-attrs-args", tag, attrs, args})},
    {"name": "tag", "symbols": [{"literal":":"}, "word", {"literal":"-"}, "word"], "postprocess": ([,w1,,w2]) => w1 + '-' + w2},
    {"name": "attrsBlock", "symbols": ["attrs"], "postprocess": id},
    {"name": "attrsBlock", "symbols": ["id"], "postprocess": id},
    {"name": "attrsBlock", "symbols": ["attrs", "__", "id"], "postprocess": ([as,,id])       => [...as, id]},
    {"name": "attrsBlock", "symbols": ["id", "__", "attrs"], "postprocess": ([id,,as])       => [id, ...as]},
    {"name": "attrsBlock", "symbols": ["attrs", "__", "id", "__", "attrs"], "postprocess": ([as1,,id,,as2]) => [...as1, id, ...as2]},
    {"name": "attrs", "symbols": ["attr"]},
    {"name": "attrs", "symbols": ["attr", "__", "attrs"], "postprocess": ([attr,,attrs]) => [attr, ...attrs]},
    {"name": "attr", "symbols": ["word"], "postprocess": ([v])     => ({t:"boolean-attr", v})},
    {"name": "attr", "symbols": ["word", "_", {"literal":"="}, "alphanum"], "postprocess": ([n,,,v]) => ({t:"value-attr",   n, v})},
    {"name": "attr", "symbols": [{"literal":"."}, "word"], "postprocess": ([,v])    => ({t:"class-attr",   v})},
    {"name": "id", "symbols": [{"literal":"#"}, "word"], "postprocess": ([,v]) => ({t:"id-attribute", v})},
    {"name": "args$ebnf$1", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "args$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "args", "symbols": ["arg", "_", "args$ebnf$1"], "postprocess": ([arg]) => [arg]},
    {"name": "args", "symbols": ["arg", "_", {"literal":","}, "_", "args"], "postprocess": ([arg,,,,args]) => [arg, ...args]},
    {"name": "arg", "symbols": ["word", "_", {"literal":":"}, "_", "alphanum"], "postprocess": ([n,,,,v])       => ({t:"value-arg",  n, v})},
    {"name": "arg", "symbols": ["word", "_", {"literal":":"}, "_", {"literal":"{"}, "mad", {"literal":"}"}], "postprocess": ([n,,,,,comps]) => ({t:"mad-arg", n, c: comps})},
    {"name": "block", "symbols": ["h1"], "postprocess": id},
    {"name": "block", "symbols": ["h2"], "postprocess": id},
    {"name": "block", "symbols": ["h3"], "postprocess": id},
    {"name": "block", "symbols": ["h4"], "postprocess": id},
    {"name": "block", "symbols": ["h5"], "postprocess": id},
    {"name": "block", "symbols": ["h6"], "postprocess": id},
    {"name": "block", "symbols": ["p"], "postprocess": id},
    {"name": "block", "symbols": ["quote"], "postprocess": id},
    {"name": "block", "symbols": ["code"], "postprocess": id},
    {"name": "h1", "symbols": ["crs", "empty", {"literal":"#"}, /[^#\n\r]/, "line"], "postprocess": ([crs,,,c,l]) => ({t:'h1', tags:['h1'],          g:' ',    s:crs.length, v:c.trim('') + join(l)})},
    {"name": "h1", "symbols": ["crs", "empty", {"literal":"#"}], "postprocess": ([crs])       => ({t:'h1', tags:['h1'],          g:' ',    s:crs.length, v:''                  })},
    {"name": "h2$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h2", "symbols": ["crs", "empty", "h2$string$1", /[^#\n\r]/, "line"], "postprocess": ([crs,,,c,l]) => ({t:'h2', tags:['h2'],          g:' ',    s:crs.length, v:c.trim('') + join(l)})},
    {"name": "h2$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h2", "symbols": ["crs", "empty", "h2$string$2"], "postprocess": ([crs])       => ({t:'h2', tags:['h2'],          g:' ',    s:crs.length, v:''                  })},
    {"name": "h3$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h3", "symbols": ["crs", "empty", "h3$string$1", /[^#\n\r]/, "line"], "postprocess": ([crs,,,c,l]) => ({t:'h3', tags:['h3'],          g:' ',    s:crs.length, v:c.trim('') + join(l)})},
    {"name": "h3$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h3", "symbols": ["crs", "empty", "h3$string$2"], "postprocess": ([crs])       => ({t:'h3', tags:['h3'],          g:' ',    s:crs.length, v:''                  })},
    {"name": "h4$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h4", "symbols": ["crs", "empty", "h4$string$1", /[^#\n\r]/, "line"], "postprocess": ([crs,,,c,l]) => ({t:'h4', tags:['h4'],          g:' ',    s:crs.length, v:c.trim('') + join(l)})},
    {"name": "h4$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h4", "symbols": ["crs", "empty", "h4$string$2"], "postprocess": ([crs])       => ({t:'h4', tags:['h4'],          g:' ',    s:crs.length, v:''                  })},
    {"name": "h5$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h5", "symbols": ["crs", "empty", "h5$string$1", /[^#\n\r]/, "line"], "postprocess": ([crs,,,c,l]) => ({t:'h5', tags:['h5'],          g:' ',    s:crs.length, v:c.trim('') + join(l)})},
    {"name": "h5$string$2", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h5", "symbols": ["crs", "empty", "h5$string$2"], "postprocess": ([crs])       => ({t:'h5', tags:['h5'],          g:' ',    s:crs.length, v:''                  })},
    {"name": "h6$string$1", "symbols": [{"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}, {"literal":"#"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "h6", "symbols": ["crs", "empty", "h6$string$1", "line"], "postprocess": ([crs,,,l])   => ({t:'h6', tags:['h6'],          g:' ',    s:crs.length, v:join(l)             })},
    {"name": "p", "symbols": ["crs", "empty", /[^#>`\s:]/, "line"], "postprocess": ([crs,,c,l])  => ({t:'p',  tags:['p'],           g:' ',    s:crs.length, v:c.trim('') + join(l)})},
    {"name": "quote", "symbols": ["crs", "empty", {"literal":">"}, "line"], "postprocess": ([crs,,,l])   => ({t:'q',  tags:['blockquote'],  g:' ',    s:crs.length, v:join(l)             })},
    {"name": "code", "symbols": ["crs", "empty", {"literal":"`"}, "line"], "postprocess": ([crs,,,l])   => ({t:'c',  tags:['pre', 'code'], g:'<br>', s:crs.length, v:raw(l)              })},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": d => null},
    {"name": "__$ebnf$1", "symbols": [/[\s]/]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": d => null},
    {"name": "q", "symbols": [{"literal":"'"}]},
    {"name": "q", "symbols": [{"literal":"\""}], "postprocess": d => null},
    {"name": "word$ebnf$1", "symbols": [/[\w-]/]},
    {"name": "word$ebnf$1", "symbols": ["word$ebnf$1", /[\w-]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "word", "symbols": ["word$ebnf$1"], "postprocess": ([d]) => d.join('')},
    {"name": "text$ebnf$1", "symbols": [/[\s\w.\\#-]/]},
    {"name": "text$ebnf$1", "symbols": ["text$ebnf$1", /[\s\w.\\#-]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "text", "symbols": ["text$ebnf$1"], "postprocess": ([d]) => d.join('')},
    {"name": "alphanum", "symbols": ["string"], "postprocess": id},
    {"name": "alphanum", "symbols": ["number"], "postprocess": id},
    {"name": "string$ebnf$1", "symbols": []},
    {"name": "string$ebnf$1", "symbols": ["string$ebnf$1", /[\w\s.]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string", "symbols": ["q", "string$ebnf$1", "q"], "postprocess": ([,s]) => s.join('')},
    {"name": "number$ebnf$1", "symbols": [/[\d]/]},
    {"name": "number$ebnf$1", "symbols": ["number$ebnf$1", /[\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1"], "postprocess": ([d]) => d.join('')},
    {"name": "number$ebnf$2", "symbols": [/[\d]/]},
    {"name": "number$ebnf$2", "symbols": ["number$ebnf$2", /[\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$3", "symbols": [/[\d]/]},
    {"name": "number$ebnf$3", "symbols": ["number$ebnf$3", /[\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$2", {"literal":"."}, "number$ebnf$3"], "postprocess": ([d]) => d.join('')},
    {"name": "crs$ebnf$1", "symbols": []},
    {"name": "crs$ebnf$1$subexpression$1", "symbols": ["empty", "nl"]},
    {"name": "crs$ebnf$1", "symbols": ["crs$ebnf$1", "crs$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "crs", "symbols": ["crs$ebnf$1"], "postprocess": id},
    {"name": "nl", "symbols": [/[\n\r]/], "postprocess": d => null},
    {"name": "line$ebnf$1", "symbols": []},
    {"name": "line$ebnf$1", "symbols": ["line$ebnf$1", /[^\n\r]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "line", "symbols": ["line$ebnf$1"], "postprocess": id},
    {"name": "empty$ebnf$1", "symbols": []},
    {"name": "empty$ebnf$1", "symbols": ["empty$ebnf$1", /[^\S\r\n]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "empty", "symbols": ["empty$ebnf$1"], "postprocess": d => null}
]
  , ParserStart: "mad"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
